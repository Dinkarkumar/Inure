name: Build APK (Beta)

on:
    workflow_dispatch:  # Allow manual triggering
#    push:
#        branches:
#            - master
#        paths-ignore:
#            - 'fastlane/**'
#            - 'scripts/**'
#            - '.idea/**'
#            - '.github/**'
#            - 'assets/**'
#            - '*.md'
#            - '*.yml'

jobs:
    build:
        name: Build APK
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up JDK
                uses: actions/setup-java@v3
                with:
                    distribution: 'temurin'
                    java-version: '17'
                    cache: 'gradle'

            -   name: Decode Keystore
                id: decode_keystore
                uses: timheuer/base64-to-file@v1
                with:
                    fileName: 'keystore/key.jks'
                    encodedString: ${{ secrets.SIGN_KEY }}

            -   name: Extract Version Name and Version Code
                run: |
                    # Extract versionName and versionCode from build.gradle
                    VERSION_NAME=$(cat app/build.gradle | grep -oP 'versionName "\K[^"]*')
                    VERSION_CODE=$(cat app/build.gradle | grep -oP 'versionCode \K\d+')

                    # Make the version name sentence case
                    VERSION_NAME=$(echo "$VERSION_NAME" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')

                    echo "Version Name: $VERSION_NAME"
                    echo "Version Code: $VERSION_CODE"

                    # Set these values as environment variables for later steps
                    echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
                    echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

            -   name: Build APK
                run: | # Use 'bundleRelease' to build the release bundle
                    chmod +x ./gradlew
                    ./gradlew clean assembleGithubRelease
                env:
                    SIGNING_KEY_ALIAS: ${{ secrets.ALIAS }}
                    SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
                    SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}

            -   name: Find APK
                id: find_apk
                run: |
                    apk=$(find . -type f -name "*.apk")
                    if [ -z "$apk" ]; then
                        echo "No APK file found."
                        exit 1
                    else
                        echo "APK_PATH=$apk" >> $GITHUB_ENV
                        echo "${{ env.APK_PATH }}"
                    fi

            -   name: Rename APK
                run: |
                    mv "${{ env.APK_PATH }}" "${{ env.VERSION_NAME }}.apk"
                    echo "APK_PATH=$(find . -type f -name "*.apk")" >> $GITHUB_ENV
                    echo "${{ env.APK_PATH }}"

            -   name: Check File Permissions
                run: |
                    ls -l "${{ env.APK_PATH }}"
                    echo "File Permissions: $(stat -c '%A' "${{ env.APK_PATH }}")"

            -   name: Set Read Permission
                run: |
                    chmod +r "${{ env.APK_PATH }}"
                    echo "File Permissions: $(stat -c '%A' "${{ env.APK_PATH }}")"

            -   name: Send APK to Telegram
                uses: appleboy/telegram-action@master
                with:
                    to: ${{ secrets.TG_TO }}
                    token: ${{ secrets.TG_BOT_KEY }}
                    document: ${{ env.APK_PATH }}
                    message: |
                        ${{ env.VERSION_NAME }} github beta apk is ready, you can test it and report any bugs or issues you had found in the group!

            -   name: Archive APK
                uses: actions/upload-artifact@v3
                with:
                    name: Beta APK (Debug)
                    path: ${{ env.APK_PATH }}
