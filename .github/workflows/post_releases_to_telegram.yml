name: Post Releases to Telegram

on:
    release:
        types: [ published ]
    workflow_dispatch: # Allow manual triggering

jobs:
    post:
        name: Post Releases to Telegram
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Extract Version Name and Version Code
                run: |
                    # Extract versionName and versionCode from build.gradle
                    VERSION_NAME=$(cat app/build.gradle | grep -oP 'versionName "\K[^"]*')
                    VERSION_CODE=$(cat app/build.gradle | grep -oP 'versionCode \K\d+')

                    # Make the version name sentence case
                    VERSION_NAME=$(echo "$VERSION_NAME" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')

                    echo "Version Name: $VERSION_NAME"
                    echo "Version Code: $VERSION_CODE"

                    # Set these values as environment variables for later steps
                    echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
                    echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

            -   name: Set Tag
                run: |
                    TAG=$(echo ${{ env.VERSION_NAME }} | tr '[:upper:]' '[:lower:]')
                    echo "TAG=${TAG}" >> $GITHUB_ENV
                    echo "Tag: ${TAG}" # Print tag to console

            -   name: Wipe out the app directory
                run: |
                    # Remove the app directory if it exists
                    if [ -d app ]; then
                        rm -rf app
                    fi

            -   name: Fetch all releases
                id: get_releases
                run: |
                    echo "Fetching all releases from $GITHUB_REPOSITORY..."
                    all_releases=$(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
                    apk_urls=""
                    for release in $(echo "${all_releases}" | jq -r '.[] | @base64'); do
                        _jq() {
                            echo ${release} | base64 --decode | jq -r ${1}
                        }
                        apk_urls+=$(echo $(_jq '.assets[] | select(.name | endswith(".apk")) | .browser_download_url'))
                        apk_urls+=" "
                    done
                    echo "apk_urls=$apk_urls" >> $GITHUB_ENV

            -   name: Download APKs
                run: |
                    for url in ${{ env.apk_urls }}; do
                        echo "Downloading $url..."
                        filename=$(basename "$url")
                        echo "Downloading $filename..."
                        curl -L -o "$filename" "$url"
                    done

            -   name: Create app directory
                run: |
                    # Create the app directory
                    mkdir app

            -   name: List all files in current directory
                run: |
                    echo "Listing all files in current directory..."
                    ls -la

            -   name: Move APKs to app directory
                run: |
                    # Move the APKs to the app directory
                    mv *.apk app/

            -   name: Rename APKs
                run: |
                    # Rename the APKs to include the version name and version code
                    # If the file name contains github, then rename it as github_release_versionName_versionCode.apk
                    # And, if it contains play, then rename it as play_store_versionName_versionCode.apk
                    for file in app/*.apk; do
                        if [[ $file == *"github"* ]]; then
                            mv $file app/github_release_${{ env.VERSION_NAME }}_${{ env.VERSION_CODE}}.apk
                            echo "Renamed $file to github_release_${{ env.VERSION_NAME }}_${{ env.VERSION_CODE}}.apk"
                        fi
                    
                        if [[ $file == *"play"* ]]; then
                            mv $file app/play_store_${{ env.VERSION_NAME }}_${{ env.VERSION_CODE}}.apk
                            echo "Renamed $file to play_store_${{ env.VERSION_NAME }}_${{ env.VERSION_CODE}}.apk"
                        fi
                    done
                    
                    # List the files in the app directory
                    ls app

            -   name: Send APK to Telegram
                uses: appleboy/telegram-action@master
                with:
                    to: ${{ secrets.APP_CHANNEL_ID_FOR_TG_BOT }}
                    token: ${{ secrets.TG_BOT_KEY }}
                    document: |
                        app/github_release_${{ env.VERSION_NAME }}_${{ env.VERSION_CODE}}.apk
                        app/play_store_${{ env.VERSION_NAME }}_${{ env.VERSION_CODE}}.apk
                    message: |
                        ${{ env.VERSION_NAME }} is live on the GitHub and Play Store.

